#!/usr/bin/env node

/**
 * Module dependencies.
 */
var fs = require('fs')
var path = require('path')
var app = require('../app')
var debug = require('debug')('foo:server')
var https = require('https')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

// setup https options with key and cert
let httpsOptions = {
  'key': fs.readFileSync(path.join(__dirname,'/../https/key.pem')),
  'cert': fs.readFileSync(path.join(__dirname,'/../https/cert.pem'))
}

/**
 * Create HTTPS 
 * Listen on provided port, on all network interfaces.
 */
var server = https.createServer(httpsOptions, app)
  .listen(port)
  .on('error', onError)
  .on('listening', onListening)

/**
 * Listen on provided port, on all network interfaces.
 */

// server.listen(port)
// server.on('error', onError)
// server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break // eslint-disable-line no-unreachable
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break // eslint-disable-line no-unreachable
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
